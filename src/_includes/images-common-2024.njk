
{# all of those are also available as WEBP WITH TRANSPARENCY #}
html:lang(en) .pagedjs_left_page .pagedjs_margin-bottom-left {
    /* margin top size */
    background: 7% 53%/22% no-repeat url("{% imageSrc 'calligraphy2024/ParallelVerses/5 one liners/spacious mind.jpg' %}");
}
html:lang(en) .pagedjs_right_page .pagedjs_margin-bottom-right {
    background: 93% 53%/22% no-repeat url("{% imageSrc 'calligraphy2024/ParallelVerses/5 one liners/inclusive heart.jpg' %}");
}

html:lang(vi) .pagedjs_left_page .pagedjs_margin-bottom-left {
    background: 7% 57%/13% no-repeat url("{% imageSrc 'calligraphy2024/ParallelVerses/5 one liners/tha thu.jpg' %}");
}
html:lang(vi) .pagedjs_right_page .pagedjs_margin-bottom-right {
    background: 93% 57%/13% no-repeat url("{% imageSrc 'calligraphy2024/ParallelVerses/5 one liners/bao dung.jpg' %}");
}


{# bulk-style all those images to be set fullsize at the bottom of the page
    parameters:
        1: height of how much of the pagedjs_page_content is reserved for the image. this determines how much the text overlaps with the image (or how much space it leaves before it breaks).
        2: top-offset (pushes image down)
        3: start of fade-in gradient (top-down) in % percent
        4: end of fade-in gradient %
#}

{# sometimes, if the top-offset is too big (>15mm for v0.2; >7mm for v0.4), the fade will not display in the pdf. I do not know why #}
{# those images must not be placed as the last element of the article.  #}
{% set items = [
["Done-Daffodil-family044110723",
    "125mm", "0mm", 5, 30],
["Done-Daffodil-family200110723e2",
    "145mm", "0mm", 0, 18],
["Done-Sr-Tam-DucIMG2900e",
    "100mm", "0mm", 0, 25],
["Done-BrDJuc-DJinhRains-retreat-23-245e",
    "130mm", "0mm", 10, 55],
["Done-Sr-Uyen-NghiemPoem-Sr-Uyen-NDSC03235-073722edit3",
    "30mm", "0mm", 0, 0],
["IMG_6618_e.jpg",
    "130mm", "0mm", 0, 15],
["Done-Review-of-the-YearTNH-Center528562133967da665de4eo",
    "120mm", "0mm", 0, 0],
["Done-Review-of-the-YearRains-retreat041Varsavasana2023-24011724",
    "110mm", "0mm", 0, 30],
["Done-interview-with-thayIMG9672",
    "50mm", "0mm", 0, 40]
]
%}

{# ["Done-Br-Bat-NhaBr-T-Bat-Nha",
    "130mm", "0mm", 0, 15], #}

{% block content %}{% endblock %}

{# commas are added automatically by nunjucks #}
{% idMap "figure#article2024", items %}
{
    margin: 0;
    max-width: none !important;
    {# >fixed< positioned elements are placed by pagedjs on >every< pagedjs_pagebox #}
    position: absolute;
    z-index: -1;
    width: calc(var(--pagedjs-pagebox-width) + (var(--bleed)) * 2);
    {# width: calc(var(--pagedjs-pagebox-width)); #}
    left: calc((var(--pagedjs-margin-left) + var(--bleed))*-1);
    {# left: calc((var(--bleed)) * -1); #}
    {# left: 0mm; #}
    overflow: visible;
}

{% idMap ".PAGE-OF-article2024", items, " .pagedjs_margin-bottom" %}
{
    display: none !important;
    content: none !important;
}


{% for item in items %}
figure#article2024{{ item[0] }} {
    {# cannot do it with >top< because I do not know the image height #}

    {# negative >bottom< works if the element is not the last in the text flow #}
    {# bottom: calc((var(--pagedjs-margin-bottom) + var(--pagedjs-footnotes-height) + var(--bleed) + {{ item[2] }}) * -1); #}

    padding-left: 4mm;
    padding-right: 4mm;
    padding-bottom: 4mm;

    bottom: calc((var(--pagedjs-margin-bottom) + var(--pagedjs-footnotes-height) + var(--bleed) + {{ item[1] }} + {{ item[2] }}) * -1);

    {# bottom: calc( (var(--pagedjs-bleed-bottom) + {{ item[2] }} ) * -1); #}
    {# bottom: calc( (var(--bleed) + {{ item[2] }} ) * -1); #}
    {# bottom: -5mm; #}

    {%- if not (item[3] == 0 and item[4] == 0) %}
        mask-image: linear-gradient(to bottom,
            {% easingGradient item[3], item[4] %}
        );
        -webkit-mask-image: linear-gradient(to bottom,
            {% easingGradient item[3], item[4] %}
        );
    {%- endif %}
}
figure#article2024{{ item[0] }} img {
    {# BUGALERT: this border has to be set to IMG, not its parent figure, otherwise pagedjs v0.4 will break the page because of it #}
    /* this is removing an artefact in the pdf, which would otherwise display a thin line of the image above the white mask */
    border-top: 2px solid white;
}


.PAGE-OF-article2024{{ item[0] }} .pagedjs_page_content {
    height: calc(100% - var(--pagedjs-footnotes-height) - {{ item[1] }}) !important;
    {# height: calc(100% + var(--pagedjs-footnotes-height) + var(--pagedjs-margin-bottom)) !important; #}
}

{# I had first factored out the static rules to apply to all elements, which did not work. I suspect because pagedjs somehow merges the static and dynamic rules (data-following) #}
figure#article2024{{ item[0] }} figcaption {
    position: absolute;
    right: 17mm;
    width: 70mm;
    color: rgb(220, 220, 220);
    {# any text-shadow (even without a blur) is computationally intense. do not use it without a strong need #}
    {# most beautiful, but computationally complex. printershops have problems with this. #}
    {# text-shadow:
        0 0 1pt black,
        0 0 1pt black,
        0 0 5pt black,
        0 0 10pt black
    ; #}
    {# text-shadow: 0.3pt 0.4pt 0 rgba(0,0,0, 0.8); #}
    {# unfortunately, this will eat the inside of the characters #}
    {# -webkit-text-stroke: 0.3pt black; #}
    {# 16mm if pagenumber is displayed #}
    bottom: calc(10mm + {{ item[2] }});
}

{# this is a text duplicate lying below the original. #}
figure#article2024{{ item[0] }} figcaption:after {
    content: attr(text-for-outline);
    position: absolute;
    -webkit-text-stroke: 0.08em rgba(0,0,0,0.8);
    right: 0;
    {# top needs to be set for multi-line captions. it has been found empirically. #}
    top: 1.333px;
    z-index: -1;
}
{% endfor %}
